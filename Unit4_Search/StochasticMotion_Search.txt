# --------------
# USER INSTRUCTIONS
#
# Write a function called stochastic_value that 
# takes no input and RETURNS two grids. The
# first grid, value, should contain the computed
# value of each cell as shown in the video. The
# second grid, policy, should contain the optimum
# policy for each cell.
#
# Stay tuned for a homework help video! This should
# be available by Thursday and will be visible
# in the course content tab.
#
# Good luck! Keep learning!
#
# --------------
# GRADING NOTES
#
# We will be calling your stochastic_value function
# with several different grids and different values
# of success_prob, collision_cost, and cost_step.
# In order to be marked correct, your function must
# RETURN (it does not have to print) two grids,
# value and policy.
#
# When grading your value grid, we will compare the
# value of each cell with the true value according
# to this model. If your answer for each cell
# is sufficiently close to the correct answer
# (within 0.001), you will be marked as correct.
#
# NOTE: Please do not modify the values of grid,
# success_prob, collision_cost, or cost_step inside
# your function. Doing so could result in your
# submission being inappropriately marked as incorrect.

# -------------
# GLOBAL VARIABLES
#
# You may modify these variables for testing
# purposes, but you should only modify them here.
# Do NOT modify them inside your stochastic_value
# function.

grid = [[0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 1, 1, 0]]
       
goal = [0, len(grid[0])-1] # Goal is in top right corner


delta = [[-1, 0 ], # go up
         [ 0, -1], # go left
         [ 1, 0 ], # go down
         [ 0, 1 ]] # go right

delta_name = ['^', '<', 'v', '>'] # Use these when creating your policy grid.

success_prob = 0.5                      
failure_prob = (1.0 - success_prob)/2.0 # Probability(stepping left) = prob(stepping right) = failure_prob
collision_cost = 100                    
cost_step = 1        
                     

############## INSERT/MODIFY YOUR CODE BELOW ##################
#
# You may modify the code below if you want, but remember that
# your function must...
#
# 1) ...be called stochastic_value().
# 2) ...NOT take any arguments.
# 3) ...return two grids: FIRST value and THEN policy.


def stochastic_value():
    value = [[1000 for row in range(len(grid[0]))] for col in range(len(grid))]
    policy = [['' for row in range(len(grid[0]))] for col in range(len(grid))]
     
    change = True
    count = 0
    while change:
        change = False

        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if goal[0] == x and goal[1] == y:
                    if value[x][y] > 0:
                        value[x][y] = 0
                        policy[x][y] = '*'
                        change = True

                elif grid[x][y] == 0:
                    for a in range(len(delta)):
                        x2 = x + delta[a][0]
                        y2 = y + delta[a][1]
                        if x2 >= 0 and x2 < len(grid) and y2 >= 0 and y2 < len(grid[0]) and grid[x2][y2] == 0:
                            sides = [0,0]
                            sides[0] = -delta[a][1]
                            sides[1] = -delta[a][0]
                            x_right = x + sides[0]
                            y_right = y + sides[1]
                            x_left = x + delta[a][1]
                            y_left = y + delta[a][0]
                            if x_right >= 0 and x_right < len(grid) and y_right >= 0 and y_right < len(grid[0]) and grid[x_right][y_right] == 0:
                                cost_right = failure_prob * value[x_right][y_right]
                            else:
                                cost_right = failure_prob * collision_cost
                            if x_left >= 0 and x_left < len(grid) and y_left >= 0 and y_left < len(grid[0]) and grid[x_left][y_left] == 0:
                                cost_left = failure_prob * value[x_left][y_left]
                            else:
                                cost_left = failure_prob * collision_cost
                                
                            
                                        
                            v2 = value[x2][y2] * success_prob + cost_step + cost_right + cost_left
                            #print 'value x2:', x2, 'value y2:', y2, 'value [x2][y2]', value[x2][y2],'vlaue[x][y]:',value[x][y],'v2:',v2,'COUNT:',count
                            count +=1
                            if v2 < value[x][y]:
                                change = True
                                #print v2
                                value[x][y] = v2
                                policy[x][y] = delta_name[a]
    for i in range(len(value)):
         print value[i]
    for i in range(len(policy)):
        print policy[i]
    return value, policy # Make sure your function returns the expected grid.
stochastic_value()





