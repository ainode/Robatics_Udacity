colors = [['red', 'green', 'green', 'red' , 'red'],
          ['red', 'red', 'green', 'red', 'red'],
          ['red', 'red', 'green', 'green', 'red'],
          ['red', 'red', 'red', 'red', 'red']]

measurements = ['green', 'green', 'green' ,'green', 'green']


motions = [[0,0],[0,1],[1,0],[1,0],[0,1]]

sensor_right = 1

p_move = 0.9

def show(p):
    for i in range(len(p)):
        print p[i]

#DO NOT USE IMPORT
#ENTER CODE BELOW HERE
#ANY CODE ABOVE WILL CAUSE
#HOMEWORK TO BE GRADED
#INCORRECT

p = []
rows = len(colors)
m = 0
q = [ [ 0 for r in range(len(colors[1]))] for c in range(len(colors))]
for i in range(len(colors)):
    for k in range(len(colors[i])):
       q[i][k] = float(1)/(len(colors)*len(colors[1]))
def sense(q,z):
    for i in range(len(colors)):
        for k in range(len(colors[i])):           
            hit = (z==colors[i][k])
            q[i][k] = q[i][k]*(sensor_right*hit + (1-hit)*(1-sensor_right))
    return q
def move(q,u):
    j = [ [ 0 for r in range(len(colors[1]))] for c in range(len(colors))]        
    for i in range(len(colors)):
        for k in range(len(colors[i])): 
           s = p_move * q[(i - u[0])% (len(colors))][(k - u[1])% (len(colors[i]))]             
#           s = p_move * q[(i - u[1])% (len(colors)*u[1] + len(colors[u[2]]))][(k - u[2])% (len(colors)*u[1] + len(colors[u[2]]))] 
           s = s + (1 - p_move) * q[i][k]
           j[i][k] = s
    q = j
    return q
def normalize(r):
    s = 0
    for i in range(len(r)):
        s = s + sum(r[i])
    for i in range(len(colors)):
        for k in range(len(colors[i])):
            r[i][k] = r[i][k]/s
    return r
for k in range(len(measurements)):
    q = move(q, motions[k])
    q = sense(q,measurements[k])
normalize(q)
#Your probability array must be printed 
#with the following code.
p = q
show(p)

